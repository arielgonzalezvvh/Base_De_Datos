-- MySQL Script generated by MySQL Workbench
-- Wed May 14 06:20:07 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Sistema de Ventas` DEFAULT CHARACTER SET utf8 ;
USE `Sistema de Ventas` ;

-- -----------------------------------------------------
-- Table `mydb`.`Productos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Sistema de Ventas`.`Productos` (
  `id_Productos` INT NOT NULL AUTO_INCREMENT,
  `Nombre_producto` VARCHAR(100) NOT NULL,
  `stock` INT NULL,
  `created_at` INT NULL,
  `updated_at` INT NULL,
  `created_by` DATETIME NULL,
  `updated_by` DATETIME NULL,
  `deleted` TINYINT(1) NULL,
  `Productoscol` VARCHAR(45) NULL,
  PRIMARY KEY (`id_Productos`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`tipo_usuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Sistema de Ventas`.`tipo_usuarios` (
  `id_tipo_usuarios` INT NOT NULL AUTO_INCREMENT,
  `nombre_tipo` VARCHAR(45) NOT NULL,
  `descripcion_tipo` VARCHAR(200) NOT NULL,
  `created_at` INT NULL,
  `updated_at` INT NULL,
  `created_by` DATETIME NULL,
  `updated_by` DATETIME NULL,
  `deleted` TINYINT(1) NULL,
  PRIMARY KEY (`id_tipo_usuarios`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`usarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Sistema de Ventas`.`usarios` (
  `id_usarios` INT NOT NULL,
  `nombre_usuario` VARCHAR(45) NULL,
  `password` VARCHAR(45) NULL,
  `correo` VARCHAR(100) NULL,
  `tipo_usuario_id` INT NULL,
  `created_at` INT NULL,
  `updated_at` INT NULL,
  `created_by` DATETIME NULL,
  `updated_by` DATETIME NULL,
  `deleted` TINYINT(1) NULL,
  `tipo_usuarios_id_tipo_usuarios` INT NOT NULL,
  PRIMARY KEY (`id_usarios`),
  INDEX `fk_usarios_tipo_usuarios1_idx` (`tipo_usuarios_id_tipo_usuarios` ASC) VISIBLE,
  CONSTRAINT `fk_usarios_tipo_usuarios1`
    FOREIGN KEY (`tipo_usuarios_id_tipo_usuarios`)
    REFERENCES `Sistema de Ventas`.`tipo_usuarios` (`id_tipo_usuarios`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Ventas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Sistema de Ventas`.`Ventas` (
  `id_Ventas` INT NOT NULL AUTO_INCREMENT,
  `usuario_id` INT NULL,
  `fecha` DATETIME NULL,
  `created_at` INT NULL,
  `updated_at` INT NULL,
  `deleted` TINYINT(1) NULL,
  `updated_by` DATETIME NULL,
  `created_by` DATETIME NULL,
  `usarios_id_usarios` INT NOT NULL,
  PRIMARY KEY (`id_Ventas`),
  INDEX `fk_Ventas_usarios1_idx` (`usarios_id_usarios` ASC) VISIBLE,
  CONSTRAINT `fk_Ventas_usarios1`
    FOREIGN KEY (`usarios_id_usarios`)
    REFERENCES `Sistema de Ventas`.`usarios` (`id_usarios`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Detalle_ventas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Sistema de Ventas`.`Detalle_ventas` (
  `id_Productos` INT NOT NULL AUTO_INCREMENT,
  `id_Ventas` INT NOT NULL,
  `producto_id` INT NOT NULL,
  `cantidad` INT NOT NULL,
  `precio_unitario` FLOAT NOT NULL,
  `created_at` INT NULL,
  `updated_at` INT NULL,
  `created_by` DATETIME NULL,
  `updated_by` DATETIME NULL,
  `deleted` TINYINT(1) NULL,
  `Detalle_ventascol` VARCHAR(45) NULL,
  INDEX `fk_Detalle_ventas_Productos_idx` (`id_Productos` ASC) VISIBLE,
  INDEX `fk_Detalle_ventas_Ventas1_idx` (`id_Ventas` ASC) VISIBLE,
  PRIMARY KEY (`id_Productos`, `id_Ventas`),
  CONSTRAINT `fk_Detalle_ventas_Productos`
    FOREIGN KEY (`id_Productos`)
    REFERENCES `Sistema de Ventas`.`Productos` (`id_Productos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Detalle_ventas_Ventas1`
    FOREIGN KEY (`id_Ventas`)
    REFERENCES `Sistema de Ventas`.`Ventas` (`id_Ventas`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;





--  1. Eliminar FOREIGN KEY desde Ventas a usarios (para poder modificar la tabla)
ALTER TABLE `Sistema de Ventas`.Ventas
DROP FOREIGN KEY fk_Ventas_usarios1;

--  2. Eliminar FOREIGN KEY desde usuarios a tipo_usuarios
ALTER TABLE `Sistema de Ventas`.usarios
DROP FOREIGN KEY fk_usarios_tipo_usuarios1;

--  3. Renombrar tabla usarios → usuarios
RENAME TABLE `Sistema de Ventas`.usarios TO `Sistema de Ventas`.usuarios;

--  4. Renombrar columna usarios_id_usarios → usuarios_id_usuarios en Ventas
ALTER TABLE `Sistema de Ventas`.Ventas
CHANGE COLUMN usarios_id_usarios usuarios_id_usuarios INT NOT NULL;

--  5. Crear nueva FOREIGN KEY desde Ventas hacia usuarios
ALTER TABLE `Sistema de Ventas`.Ventas
ADD CONSTRAINT fk_Ventas_usuarios1
FOREIGN KEY (usuarios_id_usuarios)
REFERENCES `Sistema de Ventas`.usuarios (id_usarios)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

--  6. Renombrar columna tipo_usuarios_id_tipo_usuarios → id_tipo_usuarios en usuarios
ALTER TABLE `Sistema de Ventas`.usuarios
CHANGE COLUMN tipo_usuarios_id_tipo_usuarios id_tipo_usuarios INT NOT NULL;

--  7. Eliminar columna sin uso tipo_usuario_id
ALTER TABLE `Sistema de Ventas`.usuarios
DROP COLUMN tipo_usuario_id;

--  8. Crear nueva FOREIGN KEY desde usuarios hacia tipo_usuarios
ALTER TABLE `Sistema de Ventas`.usuarios
ADD CONSTRAINT fk_usuarios_tipo_usuarios1
FOREIGN KEY (id_tipo_usuarios)
REFERENCES `Sistema de Ventas`.tipo_usuarios (id_tipo_usuarios)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

--  9. Eliminar columnas duplicadas en tipo_usuarios
ALTER TABLE `Sistema de Ventas`.tipo_usuarios
DROP COLUMN updated_by,
DROP COLUMN created_by;

--  10. Corregir columnas duplicadas en Detalle_ventas
ALTER TABLE `Sistema de Ventas`.Detalle_ventas
DROP COLUMN created_by,
DROP COLUMN updated_by;
